package tests;

import java.math.BigInteger;

import logger.CryptoLogger;

import org.apache.log4j.Logger;
import org.junit.Test;

import utils.Cryptanalyse;
import cryptobjets.BadModuleRSA;

/**
 * The Class CryptanalyseTest. Permet de tester
 * la classe <code>Cryptanalyse</code>
 * 
 * @author MAXIME DUMON, ROMAIN MACUREAU
 * @version 0.5 06/10/08
 * @since JDK 1.6
 * @see <code>Cryptanalyse</code>
 */
public class CryptanalyseTest {

	/**
	 * Test la méthode <code>calculReduites</code>
	 */
	@Test
	public void testCalculReduites() {
		Logger logger;
		logger = CryptoLogger.getInstance(this.getClass().getName());
		logger.debug("Debut de la cryptanalyse");

		BadModuleRSA rsa;
		rsa = new BadModuleRSA(30);
		// Utilisation du premier fichier fourni
		rsa.setClePublique(new BigInteger("2386827697658171847852129997137685220321137075359460863779818326590875278835758381821160644694978470666902382487911695587279090143794238135881969018529963055110153509354816437636257938528318424678484349408395372018924329039139804046805887573450208317753174788207359259992076023776672342042753203514539038181343236537918296372536811689680900526626912218235109936434699593767387653021216239462314710373500245180550108227779959557950898777626018612282753698814272297576739532514752457213141539171001040794862506373888099767200767695880556199698695070360255471461678250852450854863775391870333337781855408860802334955007"));
		rsa.setModulo(new BigInteger("17922346774785828393739054453908520286100304302618288897380881730077910888756937634555764773720444601391493865652194974110340295794161190721719434667164946107179201937706173476591743696449061920597408513034190845118598393149125900899135403942674241080835733247770310339198243955810145259471182778755795604756606439829814532694946304765664798391628283995179756138277530431681973458309049489566160456610522643525567756833499148723984969261817073055872937586483525448980541270591481241021743974726116772458214373521172076918634086681697844619285923721080013365498793965907410038404124211189329817407804498774597130182851"));
		logger.debug("Cle publique : " + rsa.getClePublique());

		BigInteger chiffre;
		chiffre = new BigInteger("16442052418667850234121153205322495052231627911423004478814599949747107598914470770341766290539020047547108681160285424679717659333995817054605711232165838763393771208577093540793738485345985737246665708231641053295858004543308516741427683820181331774473025056924951020337918263944163348327719227937337445363369306134462679710955829954228980097960668821573884146940806345413582206029767887736431135938609950959418362817819656227411674747332554510067958919708894741051718736845502599389258384564234994641298429771128008851960347765707390269263195407554788989811815988283186045994592315753563147582374149423380751637144");
		logger.debug("Chiffre : " + chiffre);

		int max;
		max = 1000;
		BigInteger[] resultat;
		resultat = Cryptanalyse.calculReduites(rsa.getClePublique(), rsa.getModulo(), max);

		/* Le but est de récupérer toutes les clés possibles
		 * puis de chiffrer un message connu et de le déchiffrer
		 * avec les clés successivement. Une fois le message d'origine
		 * retrouvé, on a la clé secrète et on peut déchiffrer le vrai message.
		 * En l'occurence : " du poulet au menu " :D
		 */
		BigInteger clair;
		BigInteger message;
		message = new BigInteger("2");
		BigInteger ch;
		ch = rsa.chiffrer(message);
		for (int i = 0; i < resultat.length; i++) {
			clair = rsa.dechiffrer(chiffre, rsa.getModulo(), resultat[i]);
			logger.debug(clair);
			if (rsa.dechiffrer(ch, rsa.getModulo(), resultat[i]).equals(message)) {
				logger.debug("Trouvé");
				System.exit(1);
			}
		}
	}
}
